/* THIS FILE IS AUTOMATICALLY GENERATED. DO NOT MODIFY. */
/* eslint-disable no-unused-vars, @typescript-eslint/no-unused-vars */
import { gql } from '@apollo/client';
import * as Apollo from '@apollo/client';

import * as Types from '../../types';

const defaultOptions = {} as const;
export type SendViaSwapMutationVariables = Types.Exact<{
  input: Types.PayNetworkSwap;
  payInput: Types.PayInput;
}>;

export type SendViaSwapMutation = {
  __typename?: 'Mutation';
  pay: {
    __typename?: 'PayMutations';
    network_swap: {
      __typename?: 'CreateLiquidTransaction';
      base_64: string;
      wallet_account: {
        __typename?: 'WalletAccount';
        id: string;
        descriptor: string;
      };
    };
  };
};

export const SendViaSwapDocument = gql`
  mutation SendViaSwap($input: PayNetworkSwap!, $payInput: PayInput!) {
    pay(input: $payInput) {
      network_swap(input: $input) {
        base_64
        wallet_account {
          id
          descriptor
        }
      }
    }
  }
`;
export type SendViaSwapMutationFn = Apollo.MutationFunction<
  SendViaSwapMutation,
  SendViaSwapMutationVariables
>;

/**
 * __useSendViaSwapMutation__
 *
 * To run a mutation, you first call `useSendViaSwapMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSendViaSwapMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [sendViaSwapMutation, { data, loading, error }] = useSendViaSwapMutation({
 *   variables: {
 *      input: // value for 'input'
 *      payInput: // value for 'payInput'
 *   },
 * });
 */
export function useSendViaSwapMutation(
  baseOptions?: Apollo.MutationHookOptions<
    SendViaSwapMutation,
    SendViaSwapMutationVariables
  >
) {
  const options = { ...defaultOptions, ...baseOptions };
  return Apollo.useMutation<SendViaSwapMutation, SendViaSwapMutationVariables>(
    SendViaSwapDocument,
    options
  );
}
export type SendViaSwapMutationHookResult = ReturnType<
  typeof useSendViaSwapMutation
>;
export type SendViaSwapMutationResult =
  Apollo.MutationResult<SendViaSwapMutation>;
export type SendViaSwapMutationOptions = Apollo.BaseMutationOptions<
  SendViaSwapMutation,
  SendViaSwapMutationVariables
>;
